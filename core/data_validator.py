#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç DATA VALIDATOR v1.0 - CENTRALIZED VALIDATION
===============================================
F√°jl: /home/tibor/PythonProjects/energia_monitoring/src/core/data_validator.py

üéØ C√âL: Minden adatvalid√°l√°s EGY HELYEN
‚úÖ Energia adatok min≈ës√©g ellen≈ërz√©s
‚úÖ Id≈ëintervallum valid√°l√°s
‚úÖ Fogyaszt√°si anom√°li√°k detekt√°l√°sa
‚úÖ Szezon√°lis mint√°zatok figyelembev√©tele
"""

import logging
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple

import numpy as np
import pandas as pd


class HealthStatus(Enum):
    """Adatok eg√©szs√©g√ºgyi st√°tusza"""

    HEALTHY = "‚úÖ Eg√©szs√©ges"
    WARNING = "‚ö†Ô∏è Figyelmeztet√©s"
    CRITICAL = "üö® Kritikus"
    UNKNOWN = "‚ùì Ismeretlen"


class SeasonType(Enum):
    """√âvszakok elektromos f≈±t√©shez"""

    WINTER = "‚ùÑÔ∏è T√©l"  # Dec, Jan, Feb
    SPRING = "üå∏ Tavasz"  # Mar, Apr, May
    SUMMER = "‚òÄÔ∏è Ny√°r"  # Jun, Jul, Aug
    AUTUMN = "üçÇ ≈êsz"  # Sep, Oct, Nov


@dataclass
class ConsumptionBounds:
    """Fogyaszt√°si hat√°r√©rt√©kek √©vszakonk√©nt"""

    min_daily_kwh: float
    max_daily_kwh: float
    expected_hourly_kwh: float
    season: SeasonType


@dataclass
class ValidationResult:
    """Egys√©ges valid√°l√°si eredm√©ny"""

    is_valid: bool
    severity: HealthStatus
    message: str
    details: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ComprehensiveReport:
    """Teljes k√∂r≈± valid√°l√°si riport"""

    total_records: int
    date_range_start: datetime
    date_range_end: datetime
    total_days: int

    # Fogyaszt√°si statisztik√°k
    total_consumption_kwh: float
    avg_daily_consumption: float
    avg_hourly_consumption: float

    # Min≈ës√©gi mutat√≥k
    negative_values: int
    zero_values: int
    extreme_values: int
    missing_data_periods: int

    # Szezon√°lis elemz√©s
    dominant_season: SeasonType
    seasonal_breakdown: Dict[SeasonType, float]

    # Valid√°l√°si eredm√©nyek
    validation_results: List[ValidationResult]
    overall_health: HealthStatus

    # Becsl√©sek
    monthly_estimate_kwh: float
    yearly_estimate_kwh: float
    yearly_cost_estimate_huf: float


class DataValidator:
    """
    üîç INTELLIGENS ADATVALID√ÅTOR v1.0

    K√∂zpontos√≠tott valid√°l√°si logika minden energia adathoz.
    """

    def __init__(self, electricity_price_huf: float = 56.07):
        """
        Inicializ√°l√°s

        Args:
            electricity_price_huf: Villamos energia √°ra (Ft/kWh)
        """
        self.electricity_price = electricity_price_huf
        self.logger = logging.getLogger(__name__)

        # Szezon√°lis fogyaszt√°si hat√°r√©rt√©kek (elektromos f≈±t√©ssel)
        self.seasonal_bounds = {
            SeasonType.WINTER: ConsumptionBounds(15.0, 80.0, 1.5, SeasonType.WINTER),
            SeasonType.SPRING: ConsumptionBounds(8.0, 40.0, 0.8, SeasonType.SPRING),
            SeasonType.SUMMER: ConsumptionBounds(3.0, 25.0, 0.4, SeasonType.SUMMER),
            SeasonType.AUTUMN: ConsumptionBounds(10.0, 50.0, 1.0, SeasonType.AUTUMN),
        }

    def validate_comprehensive(self, df: pd.DataFrame) -> ComprehensiveReport:
        """
        üîç TELJES K√ñR≈∞ ADATVALID√ÅL√ÅS

        Minden valid√°l√°si ellen≈ërz√©s egy helyen.
        """
        print(f"\nüîç TELJES K√ñR≈∞ ADATVALID√ÅL√ÅS ELKEZD≈êD√ñTT")
        print("=" * 60)

        # Alapadatok kinyer√©se
        basic_stats = self._extract_basic_statistics(df)

        # Valid√°l√°si ellen≈ërz√©sek futtat√°sa
        validation_results = []
        validation_results.extend(self._validate_data_completeness(df))
        validation_results.extend(self._validate_consumption_values(df))
        validation_results.extend(self._validate_time_intervals(df))
        validation_results.extend(self._validate_seasonal_patterns(df, basic_stats))

        # Szezon√°lis elemz√©s
        seasonal_breakdown = self._analyze_seasonal_consumption(df, basic_stats)
        dominant_season = self._determine_dominant_season(seasonal_breakdown)

        # √ñsszes√≠tett eg√©szs√©g√ºgyi st√°tusz
        overall_health = self._calculate_overall_health(validation_results)

        # Becsl√©sek sz√°m√≠t√°sa
        estimates = self._calculate_consumption_estimates(basic_stats)

        # Riport √∂ssze√°ll√≠t√°sa
        report = ComprehensiveReport(
            total_records=basic_stats["total_records"],
            date_range_start=basic_stats["date_start"],
            date_range_end=basic_stats["date_end"],
            total_days=basic_stats["total_days"],
            total_consumption_kwh=basic_stats["total_consumption"],
            avg_daily_consumption=basic_stats["avg_daily"],
            avg_hourly_consumption=basic_stats["avg_hourly"],
            negative_values=basic_stats["negative_count"],
            zero_values=basic_stats["zero_count"],
            extreme_values=basic_stats["extreme_count"],
            missing_data_periods=0,  # TODO: implement√°lni
            dominant_season=dominant_season,
            seasonal_breakdown=seasonal_breakdown,
            validation_results=validation_results,
            overall_health=overall_health,
            monthly_estimate_kwh=estimates["monthly"],
            yearly_estimate_kwh=estimates["yearly"],
            yearly_cost_estimate_huf=estimates["yearly_cost"],
        )

        self._print_comprehensive_report(report)

        return report

    def _extract_basic_statistics(self, df: pd.DataFrame) -> Dict[str, Any]:
        """Alapstatisztik√°k kinyer√©se"""

        # Id≈ëintervallum sz√°m√≠t√°sa
        df_work = df.copy()
        df_work["Intervallum_ora"] = (
            df_work["Zaro_datum"] - df_work["Kezdo_datum"]
        ).dt.total_seconds() / 3600
        df_work["Orankenti_fogyasztas"] = (
            df_work["Hatasos_ertek_kWh"] / df_work["Intervallum_ora"]
        )

        # Alapadatok
        total_records = len(df)
        date_start = df["Kezdo_datum"].min()
        date_end = df["Zaro_datum"].max()
        total_days = (date_end - date_start).days + 1

        # Fogyaszt√°si adatok
        total_consumption = df["Hatasos_ertek_kWh"].sum()
        avg_hourly = df_work["Orankenti_fogyasztas"].mean()
        avg_daily = avg_hourly * 24

        # Min≈ës√©gi mutat√≥k
        negative_count = (df["Hatasos_ertek_kWh"] < 0).sum()
        zero_count = (df["Hatasos_ertek_kWh"] == 0).sum()
        extreme_count = (df_work["Orankenti_fogyasztas"] > 50).sum()

        return {
            "total_records": total_records,
            "date_start": date_start,
            "date_end": date_end,
            "total_days": total_days,
            "total_consumption": total_consumption,
            "avg_hourly": avg_hourly,
            "avg_daily": avg_daily,
            "negative_count": negative_count,
            "zero_count": zero_count,
            "extreme_count": extreme_count,
            "df_work": df_work,
        }

    def _validate_data_completeness(self, df: pd.DataFrame) -> List[ValidationResult]:
        """Adatok teljess√©g√©nek ellen≈ërz√©se"""
        results = []

        # Hi√°nyz√≥ √©rt√©kek ellen≈ërz√©se
        missing_start_dates = df["Kezdo_datum"].isna().sum()
        missing_end_dates = df["Zaro_datum"].isna().sum()
        missing_consumption = df["Hatasos_ertek_kWh"].isna().sum()

        total_missing = missing_start_dates + missing_end_dates + missing_consumption

        if total_missing == 0:
            results.append(
                ValidationResult(
                    is_valid=True,
                    severity=HealthStatus.HEALTHY,
                    message="Nincsenek hi√°nyz√≥ √©rt√©kek",
                    details={"missing_count": 0},
                )
            )
        else:
            results.append(
                ValidationResult(
                    is_valid=False,
                    severity=HealthStatus.WARNING,
                    message=f"Hi√°nyz√≥ √©rt√©kek tal√°lhat√≥k: {total_missing}",
                    details={
                        "missing_start_dates": missing_start_dates,
                        "missing_end_dates": missing_end_dates,
                        "missing_consumption": missing_consumption,
                    },
                )
            )

        return results

    def _validate_consumption_values(self, df: pd.DataFrame) -> List[ValidationResult]:
        """Fogyaszt√°si √©rt√©kek valid√°l√°sa"""
        results = []

        # Negat√≠v √©rt√©kek
        negative_count = (df["Hatasos_ertek_kWh"] < 0).sum()
        if negative_count > 0:
            results.append(
                ValidationResult(
                    is_valid=False,
                    severity=HealthStatus.WARNING,
                    message=f"Negat√≠v fogyaszt√°si √©rt√©kek: {negative_count}",
                    details={"negative_values": negative_count},
                )
            )

        # Nulla √©rt√©kek (hib√°s m√©r≈ëk)
        zero_count = (df["Hatasos_ertek_kWh"] == 0).sum()
        if zero_count > 0:
            zero_percentage = (zero_count / len(df)) * 100
            severity = (
                HealthStatus.CRITICAL if zero_percentage > 10 else HealthStatus.WARNING
            )

            results.append(
                ValidationResult(
                    is_valid=zero_percentage < 5,
                    severity=severity,
                    message=f"Nulla fogyaszt√°si √©rt√©kek: {zero_count} ({zero_percentage:.1f}%)",
                    details={
                        "zero_values": zero_count,
                        "zero_percentage": zero_percentage,
                    },
                )
            )

        return results

    def _validate_time_intervals(self, df: pd.DataFrame) -> List[ValidationResult]:
        """Id≈ëintervallumok valid√°l√°sa"""
        results = []

        # Intervallum sz√°m√≠t√°sa
        df_work = df.copy()
        df_work["Intervallum_perc"] = (
            df_work["Zaro_datum"] - df_work["Kezdo_datum"]
        ).dt.total_seconds() / 60

        # V√°rt intervallumok ellen≈ërz√©se
        interval_15min = len(
            df_work[
                (df_work["Intervallum_perc"] >= 14)
                & (df_work["Intervallum_perc"] <= 16)
            ]
        )
        interval_60min = len(
            df_work[
                (df_work["Intervallum_perc"] >= 55)
                & (df_work["Intervallum_perc"] <= 65)
            ]
        )

        total_standard = interval_15min + interval_60min
        standard_percentage = (total_standard / len(df_work)) * 100

        if standard_percentage > 95:
            results.append(
                ValidationResult(
                    is_valid=True,
                    severity=HealthStatus.HEALTHY,
                    message=f"Id≈ëintervallumok rendben ({standard_percentage:.1f}% szabv√°nyos)",
                    details={
                        "interval_15min": interval_15min,
                        "interval_60min": interval_60min,
                        "standard_percentage": standard_percentage,
                    },
                )
            )
        else:
            results.append(
                ValidationResult(
                    is_valid=False,
                    severity=HealthStatus.WARNING,
                    message=f"Szokatlan id≈ëintervallumok ({standard_percentage:.1f}% szabv√°nyos)",
                    details={
                        "interval_15min": interval_15min,
                        "interval_60min": interval_60min,
                        "standard_percentage": standard_percentage,
                    },
                )
            )

        return results

    def _validate_seasonal_patterns(
        self, df: pd.DataFrame, basic_stats: Dict[str, Any]
    ) -> List[ValidationResult]:
        """Szezon√°lis mint√°zatok valid√°l√°sa"""
        results = []

        avg_daily = basic_stats["avg_daily"]
        date_start = basic_stats["date_start"]
        date_end = basic_stats["date_end"]

        # Meghat√°rozzuk a domin√°ns √©vszakot
        dominant_season = self._get_season_for_period(date_start, date_end)
        expected_bounds = self.seasonal_bounds[dominant_season]

        # Szezon√°lis elv√°r√°sokhoz viszony√≠t√°s
        if expected_bounds.min_daily_kwh <= avg_daily <= expected_bounds.max_daily_kwh:
            results.append(
                ValidationResult(
                    is_valid=True,
                    severity=HealthStatus.HEALTHY,
                    message=f"Fogyaszt√°s a szezon√°lis elv√°r√°soknak megfelel≈ë ({dominant_season.value})",
                    details={
                        "avg_daily": avg_daily,
                        "season": dominant_season.value,
                        "expected_min": expected_bounds.min_daily_kwh,
                        "expected_max": expected_bounds.max_daily_kwh,
                    },
                )
            )
        else:
            if avg_daily < expected_bounds.min_daily_kwh:
                severity = HealthStatus.WARNING
                message = f"√Åtlag alatti fogyaszt√°s {dominant_season.value} id≈ëszakra"
            else:
                severity = HealthStatus.WARNING
                message = f"√Åtlag feletti fogyaszt√°s {dominant_season.value} id≈ëszakra"

            results.append(
                ValidationResult(
                    is_valid=False,
                    severity=severity,
                    message=message,
                    details={
                        "avg_daily": avg_daily,
                        "season": dominant_season.value,
                        "expected_min": expected_bounds.min_daily_kwh,
                        "expected_max": expected_bounds.max_daily_kwh,
                    },
                )
            )

        return results

    def _analyze_seasonal_consumption(
        self, df: pd.DataFrame, basic_stats: Dict[str, Any]
    ) -> Dict[SeasonType, float]:
        """Szezon√°lis fogyaszt√°s elemz√©se"""

        df_work = basic_stats["df_work"].copy()
        df_work["Month"] = df_work["Kezdo_datum"].dt.month

        # Havi fogyaszt√°sok sz√°m√≠t√°sa
        monthly_consumption = df_work.groupby("Month")["Hatasos_ertek_kWh"].sum()

        # √âvszakokra bont√°s
        seasonal_totals = {season: 0.0 for season in SeasonType}

        for month, consumption in monthly_consumption.items():
            season = self._get_season_for_month(month)
            seasonal_totals[season] += consumption

        return seasonal_totals

    def _determine_dominant_season(
        self, seasonal_breakdown: Dict[SeasonType, float]
    ) -> SeasonType:
        """Meghat√°rozza a domin√°ns √©vszakot a fogyaszt√°s alapj√°n"""
        return max(seasonal_breakdown.keys(), key=lambda s: seasonal_breakdown[s])

    def _get_season_for_month(self, month: int) -> SeasonType:
        """√âvszak meghat√°roz√°sa h√≥nap alapj√°n"""
        if month in [12, 1, 2]:
            return SeasonType.WINTER
        elif month in [3, 4, 5]:
            return SeasonType.SPRING
        elif month in [6, 7, 8]:
            return SeasonType.SUMMER
        else:  # 9, 10, 11
            return SeasonType.AUTUMN

    def _get_season_for_period(
        self, start_date: datetime, end_date: datetime
    ) -> SeasonType:
        """Domin√°ns √©vszak meghat√°roz√°sa id≈ëszakra"""

        # Egyszer≈±s√≠tett: a k√∂z√©ps≈ë d√°tum h√≥napja alapj√°n
        middle_date = start_date + (end_date - start_date) / 2
        return self._get_season_for_month(middle_date.month)

    def _calculate_overall_health(
        self, validation_results: List[ValidationResult]
    ) -> HealthStatus:
        """√ñsszes√≠tett eg√©szs√©g√ºgyi st√°tusz sz√°m√≠t√°sa"""

        if not validation_results:
            return HealthStatus.UNKNOWN

        # Legs√∫lyosabb probl√©ma meghat√°roz√°sa
        severities = [result.severity for result in validation_results]

        if HealthStatus.CRITICAL in severities:
            return HealthStatus.CRITICAL
        elif HealthStatus.WARNING in severities:
            return HealthStatus.WARNING
        else:
            return HealthStatus.HEALTHY

    def _calculate_consumption_estimates(
        self, basic_stats: Dict[str, Any]
    ) -> Dict[str, float]:
        """Fogyaszt√°si becsl√©sek sz√°m√≠t√°sa"""

        avg_daily = basic_stats["avg_daily"]

        monthly_estimate = avg_daily * 30
        yearly_estimate = avg_daily * 365
        yearly_cost = yearly_estimate * self.electricity_price

        return {
            "monthly": monthly_estimate,
            "yearly": yearly_estimate,
            "yearly_cost": yearly_cost,
        }

    def _print_comprehensive_report(self, report: ComprehensiveReport):
        """R√©szletes riport ki√≠r√°sa"""

        print(f"\nüìä TELJES K√ñR≈∞ VALID√ÅL√ÅSI RIPORT")
        print("=" * 60)

        # Alapadatok
        print(
            f"üìÖ Id≈ëszak: {report.date_range_start.date()} ‚Üí {report.date_range_end.date()}"
        )
        print(f"üìä Napok sz√°ma: {report.total_days}")
        print(f"üìà Rekordok sz√°ma: {report.total_records:,}")

        # Fogyaszt√°si statisztik√°k
        print(f"\n‚ö° FOGYASZT√ÅSI ADATOK:")
        print(f"   üìä √ñsszes: {report.total_consumption_kwh:.1f} kWh")
        print(f"   üìä Napi √°tlag: {report.avg_daily_consumption:.1f} kWh/nap")
        print(f"   üìä √ìr√°s √°tlag: {report.avg_hourly_consumption:.3f} kWh/√≥ra")

        # Szezon√°lis elemz√©s
        print(f"\n{report.dominant_season.value} SZEZON√ÅLIS ELEMZ√âS:")
        for season, consumption in report.seasonal_breakdown.items():
            if consumption > 0:
                print(f"   {season.value}: {consumption:.1f} kWh")

        # Min≈ës√©gi mutat√≥k
        print(f"\nüîç ADATMIN≈êS√âG:")
        print(f"   ‚ùå Negat√≠v √©rt√©kek: {report.negative_values}")
        print(f"   ‚≠ï Nulla √©rt√©kek: {report.zero_values}")
        print(f"   üî• Extr√©m √©rt√©kek: {report.extreme_values}")

        # Valid√°l√°si eredm√©nyek
        print(f"\n‚úÖ VALID√ÅL√ÅSI EREDM√âNYEK:")
        for result in report.validation_results:
            status_icon = "‚úÖ" if result.is_valid else "‚ö†Ô∏è"
            print(f"   {status_icon} {result.message}")

        # √ñsszes√≠tett st√°tusz
        print(f"\n{report.overall_health.value} √ñSSZES√çTETT √ÅLLAPOT")

        # Becsl√©sek
        print(f"\nüí∞ BECSL√âSEK:")
        print(f"   üìä Havi becsl√©s: {report.monthly_estimate_kwh:.0f} kWh")
        print(f"   üìä √âves becsl√©s: {report.yearly_estimate_kwh:.0f} kWh")
        print(f"   üí∞ √âves k√∂lts√©g: {report.yearly_cost_estimate_huf:,.0f} Ft")

        self.logger.info(f"Valid√°l√°si riport elk√©sz√ºlt: {report.overall_health.value}")

    def quick_validate(self, df: pd.DataFrame) -> HealthStatus:
        """
        üöÄ GYORS VALID√ÅL√ÅS

        Egyszer≈± interface a gyors √°llapot ellen≈ërz√©shez.
        """
        report = self.validate_comprehensive(df)
        return report.overall_health

    def validate_consumption_bounds(
        self, avg_daily: float, season: SeasonType
    ) -> ValidationResult:
        """Adott fogyaszt√°s valid√°l√°sa szezon√°lis hat√°rokhoz k√©pest"""

        bounds = self.seasonal_bounds[season]

        if bounds.min_daily_kwh <= avg_daily <= bounds.max_daily_kwh:
            return ValidationResult(
                is_valid=True,
                severity=HealthStatus.HEALTHY,
                message=f"Fogyaszt√°s norm√°lis {season.value} id≈ëszakra",
                details={"avg_daily": avg_daily, "season": season.value},
            )
        else:
            severity = HealthStatus.WARNING
            if avg_daily < bounds.min_daily_kwh:
                message = f"Alacsony fogyaszt√°s {season.value} id≈ëszakra"
            else:
                message = f"Magas fogyaszt√°s {season.value} id≈ëszakra"

            return ValidationResult(
                is_valid=False,
                severity=severity,
                message=message,
                details={"avg_daily": avg_daily, "season": season.value},
            )


# ===== UTILITY FUNCTIONS =====


def create_data_validator(electricity_price: float = 56.07) -> DataValidator:
    """Factory f√ºggv√©ny DataValidator l√©trehoz√°s√°hoz"""
    return DataValidator(electricity_price_huf=electricity_price)


def quick_data_validation(df: pd.DataFrame) -> HealthStatus:
    """
    üöÄ GYORS ADATVALID√ÅL√ÅS

    Egyszer≈± interface a gyors haszn√°lathoz.
    """
    validator = DataValidator()
    return validator.quick_validate(df)


# ===== TESZTEL√âSI FUNKCI√ìK =====


def test_data_validator():
    """Alapvet≈ë tesztel√©s a DataValidator oszt√°lyhoz"""
    print("üß™ DATA VALIDATOR TESZT")
    print("=" * 40)

    # Mock DataFrame l√©trehoz√°sa
    date_range = pd.date_range("2025-01-01", periods=96, freq="15T")
    test_data = {
        "Gyariszam": ["123"] * 96,
        "Azonosito": ["A1"] * 96,
        "Kezdo_datum": date_range[:-1],
        "Zaro_datum": date_range[1:],
        "Hatasos_ertek_kWh": np.random.uniform(
            0.05, 0.25, 95
        ),  # T√©li fogyaszt√°s szimul√°ci√≥
    }

    df_test = pd.DataFrame(test_data)

    print(f"Teszt DataFrame l√©trehozva: {len(df_test)} rekord")
    print("T√©li fogyaszt√°s szimul√°lva")

    # DataValidator tesztel√©se
    validator = DataValidator()
    report = validator.validate_comprehensive(df_test)

    print(f"‚úÖ Teszt befejezve: {report.overall_health.value}")
    print(f"‚úÖ Napi √°tlag: {report.avg_daily_consumption:.1f} kWh")

    return report


if __name__ == "__main__":
    # Alapvet≈ë teszt futtat√°sa
    test_data_validator()

    print(f"\nüéâ DATA VALIDATOR v1.0 BET√ñLTVE!")
    print(f"üìù Centraliz√°lt valid√°l√°si logika")
    print(f"‚úÖ Szezon√°lis mint√°zatok figyelembev√©tele")
    print(f"‚úÖ Elektromos f≈±t√©s t√°mogat√°ssal!")
